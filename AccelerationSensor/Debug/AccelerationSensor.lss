
AccelerationSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c25  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00001125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bb  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  9e:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SetBusSpeed>:
}

// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e8       	ldi	r22, 0x80	; 128
  ae:	78 e3       	ldi	r23, 0x38	; 56
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 aa 01 	call	0x354	; 0x354 <__udivmodsi4>
  b8:	da 01       	movw	r26, r20
  ba:	c9 01       	movw	r24, r18
  bc:	40 97       	sbiw	r24, 0x10	; 16
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
  c2:	b6 95       	lsr	r27
  c4:	a7 95       	ror	r26
  c6:	97 95       	ror	r25
  c8:	87 95       	ror	r24
  ca:	9c 01       	movw	r18, r24
	uint8_t prescaler = 0;
	while(speed > 255)
  cc:	8f 3f       	cpi	r24, 0xFF	; 255
  ce:	91 05       	cpc	r25, r1
  d0:	61 f0       	breq	.+24     	; 0xea <I2C_SetBusSpeed+0x44>
  d2:	58 f0       	brcs	.+22     	; 0xea <I2C_SetBusSpeed+0x44>
  d4:	80 e0       	ldi	r24, 0x00	; 0
	{
		
		prescaler++;
  d6:	8f 5f       	subi	r24, 0xFF	; 255
		speed = speed / 4;
  d8:	36 95       	lsr	r19
  da:	27 95       	ror	r18
  dc:	36 95       	lsr	r19
  de:	27 95       	ror	r18
// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
	uint8_t prescaler = 0;
	while(speed > 255)
  e0:	2f 3f       	cpi	r18, 0xFF	; 255
  e2:	31 05       	cpc	r19, r1
  e4:	09 f0       	breq	.+2      	; 0xe8 <I2C_SetBusSpeed+0x42>
  e6:	b8 f7       	brcc	.-18     	; 0xd6 <I2C_SetBusSpeed+0x30>
  e8:	01 c0       	rjmp	.+2      	; 0xec <I2C_SetBusSpeed+0x46>

// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
	uint8_t prescaler = 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
	{
		
		prescaler++;
		speed = speed / 4;
	}
	TWSR = (TWSR & (_BV(TWPS1) | _BV(TWPS0))) | prescaler;
  ec:	e9 eb       	ldi	r30, 0xB9	; 185
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	93 70       	andi	r25, 0x03	; 3
  f4:	89 2b       	or	r24, r25
  f6:	80 83       	st	Z, r24
	TWBR = speed;
  f8:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  fc:	08 95       	ret

000000fe <I2C_Init>:
********************************************************************************/

// Function that initialize I2C communication in uC.
void I2C_Init(void)
{
	TWCR = _BV(TWEA) | _BV(TWEN);
  fe:	84 e4       	ldi	r24, 0x44	; 68
 100:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	I2C_SetBusSpeed(I2CBUSCLOCK / 100);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SetBusSpeed>
 10c:	08 95       	ret

0000010e <I2C_Start>:
}

// Function that generate START signal on I2C bus.
void I2C_Start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 10e:	84 ea       	ldi	r24, 0xA4	; 164
 110:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
int8_t I2C_ReceiveDataBytes_ACK(void);


static inline void I2C_WaitForComplete(void)
{
	while(!(TWCR & _BV(TWINT)))
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	ec f7       	brge	.-6      	; 0x118 <I2C_Start+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_START) I2C_SetError(I2C_STARTError);
 11e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 122:	08 95       	ret

00000124 <I2C_Stop>:
}

//Function that generate STOP signal on I2C bus.
void I2C_Stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 124:	84 e9       	ldi	r24, 0x94	; 148
 126:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 12a:	08 95       	ret

0000012c <I2C_SendDevAddr>:
	}
	else
	{
		status = TW_MR_SLA_ACK;
	}
	TWDR = address;
 12c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
 130:	84 e8       	ldi	r24, 0x84	; 132
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 23       	and	r24, r24
 13e:	ec f7       	brge	.-6      	; 0x13a <I2C_SendDevAddr+0xe>
	I2C_WaitForComplete();
	if(TW_STATUS != status)
 140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 144:	08 95       	ret

00000146 <I2C_SendStartAndSelect>:
	}
}

// Function that send start signal and device address that we want to communicate on I2C bus.
void I2C_SendStartAndSelect(uint8_t addr)
{
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	I2C_Start();
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <I2C_Start>
	I2C_SendDevAddr(addr);
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 96 00 	call	0x12c	; 0x12c <I2C_SendDevAddr>
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <I2C_SendByte>:

// Function that send data to device through I2C bus.
void I2C_SendByte(uint8_t byte)
{
	TWDR = byte;
 158:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
 15c:	84 e8       	ldi	r24, 0x84	; 132
 15e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 162:	ec eb       	ldi	r30, 0xBC	; 188
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	ec f7       	brge	.-6      	; 0x166 <I2C_SendByte+0xe>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MT_DATA_ACK)
 16c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 170:	08 95       	ret

00000172 <I2C_ReceiveDataByte_NACK>:
}

// Function that receive data byte from device through I2C bus.
int8_t I2C_ReceiveDataByte_NACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 178:	ec eb       	ldi	r30, 0xBC	; 188
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <I2C_ReceiveDataByte_NACK+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MR_DATA_NACK)
 182:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		I2C_SetError(I2C_NoNACK);
	}
	return TWDR;
 186:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 18a:	08 95       	ret

0000018c <I2C_ReceiveDataBytes_ACK>:

// Function that receive data bytes(more then one byte) from device through I2C bus.
int8_t I2C_ReceiveDataBytes_ACK(void)
{
	TWCR = _BV(TWEA) | _BV(TWINT) | _BV(TWEN);
 18c:	84 ec       	ldi	r24, 0xC4	; 196
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <I2C_ReceiveDataBytes_ACK+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MR_DATA_ACK)
 19c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		I2C_SetError(I2C_NoACK);
	}
	return TWDR;
 1a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1a4:	08 95       	ret

000001a6 <main>:
static uint8_t buffer;


int main(void)
{
	state = ACCEL_INIT_STATE;
 1a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	//DDRB |= _BV(5);
	//DDRC |= _BV(PC0);
	
    while (1) 
    {
		PORTC = 0xFF;
 1aa:	cf ef       	ldi	r28, 0xFF	; 255
			I2C_SendStartAndSelect(LIS3DH_W);
			I2C_SendByte(CTRL_REG1);
			I2C_SendByte(buffer);
			I2C_Stop();
			
			state = ACCEL_RUN_STATE;
 1ac:	d2 e0       	ldi	r29, 0x02	; 2
		
		switch(state)
		{
		case ACCEL_INIT_STATE:
			I2C_Init();
			state = ACCEL_CONFIG_STATE;
 1ae:	cc 24       	eor	r12, r12
 1b0:	c3 94       	inc	r12
			
		case ACCEL_RUN_STATE:
			I2C_SendStartAndSelect(LIS3DH_W);
			I2C_SendByte(OUT_X_L | 0x80);
			I2C_SendStartAndSelect(LIS3DH_R);
			accelsTemp.x = I2C_ReceiveDataBytes_ACK();
 1b2:	02 e0       	ldi	r16, 0x02	; 2
 1b4:	11 e0       	ldi	r17, 0x01	; 1
			accelsTemp.y = I2C_ReceiveDataBytes_ACK();
			accelsTemp.z = I2C_ReceiveDataByte_NACK();
			I2C_Stop();
			
			state = ACCEL_WORKING_STATE;
 1b6:	68 94       	set
 1b8:	dd 24       	eor	r13, r13
 1ba:	d2 f8       	bld	r13, 2
		break;
			
		case ACCEL_WORKING_STATE:
			_delay_ms(1000);
			PORTB ^= _BV(5);
			if((accelsTemp.x - accels.x) > 32)
 1bc:	0f 2e       	mov	r0, r31
 1be:	f5 e0       	ldi	r31, 0x05	; 5
 1c0:	ef 2e       	mov	r14, r31
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	ff 2e       	mov	r15, r31
 1c6:	f0 2d       	mov	r31, r0
	//DDRB |= _BV(5);
	//DDRC |= _BV(PC0);
	
    while (1) 
    {
		PORTC = 0xFF;
 1c8:	c8 b9       	out	0x08, r28	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	89 e6       	ldi	r24, 0x69	; 105
 1ce:	98 e1       	ldi	r25, 0x18	; 24
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x2a>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x34>
 1da:	00 00       	nop
		//PORTB ^= _BV(PB5);
		_delay_ms(1000);
		
		switch(state)
 1dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	69 f0       	breq	.+26     	; 0x1fe <main+0x58>
 1e4:	38 f0       	brcs	.+14     	; 0x1f4 <main+0x4e>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	09 f4       	brne	.+2      	; 0x1ec <main+0x46>
 1ea:	4c c0       	rjmp	.+152    	; 0x284 <main+0xde>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0x4c>
 1f0:	63 c0       	rjmp	.+198    	; 0x2b8 <main+0x112>
 1f2:	ea cf       	rjmp	.-44     	; 0x1c8 <main+0x22>
		{
		case ACCEL_INIT_STATE:
			I2C_Init();
 1f4:	0e 94 7f 00 	call	0xfe	; 0xfe <I2C_Init>
			state = ACCEL_CONFIG_STATE;
 1f8:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <state>
		break;
 1fc:	e5 cf       	rjmp	.-54     	; 0x1c8 <main+0x22>
			
		case ACCEL_CONFIG_STATE:			
			I2C_SendStartAndSelect(LIS3DH_W);
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 20a:	81 e3       	ldi	r24, 0x31	; 49
 20c:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			buffer = I2C_ReceiveDataByte_NACK();
 210:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_ReceiveDataByte_NACK>
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			I2C_Stop();
 218:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
	
			buffer |= _BV(LPen) | _BV(ODR2) | _BV(ODR0);
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 220:	88 65       	ori	r24, 0x58	; 88
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_SendByte(buffer);
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 236:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_Stop();
 23a:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 23e:	80 e3       	ldi	r24, 0x30	; 48
 240:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG4);
 244:	83 e2       	ldi	r24, 0x23	; 35
 246:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 24a:	81 e3       	ldi	r24, 0x31	; 49
 24c:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			buffer = I2C_ReceiveDataByte_NACK();
 250:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_ReceiveDataByte_NACK>
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			I2C_Stop();
 258:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
			
			buffer |= _BV(BDU) | _BV(FS1);
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 260:	80 6a       	ori	r24, 0xA0	; 160
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_SendByte(buffer);
 272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 276:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_Stop();
 27a:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
			
			state = ACCEL_RUN_STATE;
 27e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <state>
		break;
 282:	a2 cf       	rjmp	.-188    	; 0x1c8 <main+0x22>
			
		case ACCEL_RUN_STATE:
			I2C_SendStartAndSelect(LIS3DH_W);
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			I2C_SendByte(OUT_X_L | 0x80);
 28a:	88 ea       	ldi	r24, 0xA8	; 168
 28c:	0e 94 ac 00 	call	0x158	; 0x158 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 290:	81 e3       	ldi	r24, 0x31	; 49
 292:	0e 94 a3 00 	call	0x146	; 0x146 <I2C_SendStartAndSelect>
			accelsTemp.x = I2C_ReceiveDataBytes_ACK();
 296:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_ReceiveDataBytes_ACK>
 29a:	f8 01       	movw	r30, r16
 29c:	80 83       	st	Z, r24
			accelsTemp.y = I2C_ReceiveDataBytes_ACK();
 29e:	0e 94 c6 00 	call	0x18c	; 0x18c <I2C_ReceiveDataBytes_ACK>
 2a2:	f8 01       	movw	r30, r16
 2a4:	81 83       	std	Z+1, r24	; 0x01
			accelsTemp.z = I2C_ReceiveDataByte_NACK();
 2a6:	0e 94 b9 00 	call	0x172	; 0x172 <I2C_ReceiveDataByte_NACK>
 2aa:	f8 01       	movw	r30, r16
 2ac:	82 83       	std	Z+2, r24	; 0x02
			I2C_Stop();
 2ae:	0e 94 92 00 	call	0x124	; 0x124 <I2C_Stop>
			
			state = ACCEL_WORKING_STATE;
 2b2:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <state>
		break;
 2b6:	88 cf       	rjmp	.-240    	; 0x1c8 <main+0x22>
 2b8:	ff ef       	ldi	r31, 0xFF	; 255
 2ba:	29 e6       	ldi	r18, 0x69	; 105
 2bc:	88 e1       	ldi	r24, 0x18	; 24
 2be:	f1 50       	subi	r31, 0x01	; 1
 2c0:	20 40       	sbci	r18, 0x00	; 0
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x118>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x122>
 2c8:	00 00       	nop
			
		case ACCEL_WORKING_STATE:
			_delay_ms(1000);
			PORTB ^= _BV(5);
 2ca:	95 b1       	in	r25, 0x05	; 5
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	89 27       	eor	r24, r25
 2d0:	85 b9       	out	0x05, r24	; 5
			if((accelsTemp.x - accels.x) > 32)
 2d2:	f8 01       	movw	r30, r16
 2d4:	20 81       	ld	r18, Z
 2d6:	82 2f       	mov	r24, r18
 2d8:	02 2e       	mov	r0, r18
 2da:	00 0c       	add	r0, r0
 2dc:	99 0b       	sbc	r25, r25
 2de:	f7 01       	movw	r30, r14
 2e0:	30 81       	ld	r19, Z
 2e2:	83 1b       	sub	r24, r19
 2e4:	91 09       	sbc	r25, r1
 2e6:	37 fd       	sbrc	r19, 7
 2e8:	93 95       	inc	r25
 2ea:	81 97       	sbiw	r24, 0x21	; 33
 2ec:	2c f0       	brlt	.+10     	; 0x2f8 <main+0x152>
			{
				PORTB ^= _BV(5);
 2ee:	95 b1       	in	r25, 0x05	; 5
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	89 27       	eor	r24, r25
 2f4:	85 b9       	out	0x05, r24	; 5
 2f6:	2b c0       	rjmp	.+86     	; 0x34e <main+0x1a8>
			}
			else if((accelsTemp.y - accels.y) > 32)
 2f8:	f8 01       	movw	r30, r16
 2fa:	31 81       	ldd	r19, Z+1	; 0x01
 2fc:	83 2f       	mov	r24, r19
 2fe:	03 2e       	mov	r0, r19
 300:	00 0c       	add	r0, r0
 302:	99 0b       	sbc	r25, r25
 304:	f7 01       	movw	r30, r14
 306:	41 81       	ldd	r20, Z+1	; 0x01
 308:	84 1b       	sub	r24, r20
 30a:	91 09       	sbc	r25, r1
 30c:	47 fd       	sbrc	r20, 7
 30e:	93 95       	inc	r25
 310:	81 97       	sbiw	r24, 0x21	; 33
 312:	2c f0       	brlt	.+10     	; 0x31e <main+0x178>
			{
				PORTB ^= _BV(5);
 314:	95 b1       	in	r25, 0x05	; 5
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	89 27       	eor	r24, r25
 31a:	85 b9       	out	0x05, r24	; 5
 31c:	18 c0       	rjmp	.+48     	; 0x34e <main+0x1a8>
			}
			else if((accelsTemp.z - accels.z) > 32)
 31e:	f8 01       	movw	r30, r16
 320:	42 81       	ldd	r20, Z+2	; 0x02
 322:	84 2f       	mov	r24, r20
 324:	04 2e       	mov	r0, r20
 326:	00 0c       	add	r0, r0
 328:	99 0b       	sbc	r25, r25
 32a:	f7 01       	movw	r30, r14
 32c:	52 81       	ldd	r21, Z+2	; 0x02
 32e:	85 1b       	sub	r24, r21
 330:	91 09       	sbc	r25, r1
 332:	57 fd       	sbrc	r21, 7
 334:	93 95       	inc	r25
 336:	81 97       	sbiw	r24, 0x21	; 33
 338:	2c f0       	brlt	.+10     	; 0x344 <main+0x19e>
			{
				PORTB ^= _BV(5);
 33a:	95 b1       	in	r25, 0x05	; 5
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	89 27       	eor	r24, r25
 340:	85 b9       	out	0x05, r24	; 5
 342:	05 c0       	rjmp	.+10     	; 0x34e <main+0x1a8>
			}
			else
			{
				accels.x = accelsTemp.x;
 344:	f7 01       	movw	r30, r14
 346:	20 83       	st	Z, r18
				accels.y = accelsTemp.y;
 348:	31 83       	std	Z+1, r19	; 0x01
				accels.z = accelsTemp.z;
 34a:	42 83       	std	Z+2, r20	; 0x02
				
				PORTB &= ~_BV(5);
 34c:	2d 98       	cbi	0x05, 5	; 5
			}
			
			state = ACCEL_RUN_STATE;
 34e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <state>
		break;
 352:	3a cf       	rjmp	.-396    	; 0x1c8 <main+0x22>

00000354 <__udivmodsi4>:
 354:	a1 e2       	ldi	r26, 0x21	; 33
 356:	1a 2e       	mov	r1, r26
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	fd 01       	movw	r30, r26
 35e:	0d c0       	rjmp	.+26     	; 0x37a <__udivmodsi4_ep>

00000360 <__udivmodsi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	ee 1f       	adc	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	a2 17       	cp	r26, r18
 36a:	b3 07       	cpc	r27, r19
 36c:	e4 07       	cpc	r30, r20
 36e:	f5 07       	cpc	r31, r21
 370:	20 f0       	brcs	.+8      	; 0x37a <__udivmodsi4_ep>
 372:	a2 1b       	sub	r26, r18
 374:	b3 0b       	sbc	r27, r19
 376:	e4 0b       	sbc	r30, r20
 378:	f5 0b       	sbc	r31, r21

0000037a <__udivmodsi4_ep>:
 37a:	66 1f       	adc	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a 94       	dec	r1
 384:	69 f7       	brne	.-38     	; 0x360 <__udivmodsi4_loop>
 386:	60 95       	com	r22
 388:	70 95       	com	r23
 38a:	80 95       	com	r24
 38c:	90 95       	com	r25
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	bd 01       	movw	r22, r26
 394:	cf 01       	movw	r24, r30
 396:	08 95       	ret

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
