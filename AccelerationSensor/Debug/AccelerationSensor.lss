
AccelerationSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b68  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bb  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052e  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  000022a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  9e:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_SetBusSpeed>:
}

// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
  a6:	9c 01       	movw	r18, r24
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	60 e1       	ldi	r22, 0x10	; 16
  ae:	77 e2       	ldi	r23, 0x27	; 39
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodsi4>
  b8:	ba 01       	movw	r22, r20
  ba:	a9 01       	movw	r20, r18
  bc:	40 51       	subi	r20, 0x10	; 16
  be:	51 09       	sbc	r21, r1
  c0:	61 09       	sbc	r22, r1
  c2:	71 09       	sbc	r23, r1
  c4:	db 01       	movw	r26, r22
  c6:	ca 01       	movw	r24, r20
  c8:	1a f4       	brpl	.+6      	; 0xd0 <I2C_SetBusSpeed+0x2a>
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	a1 1d       	adc	r26, r1
  ce:	b1 1d       	adc	r27, r1
  d0:	b5 95       	asr	r27
  d2:	a7 95       	ror	r26
  d4:	97 95       	ror	r25
  d6:	87 95       	ror	r24
	uint8_t prescaler = 0;
	while(speed > 255)
  d8:	8f 3f       	cpi	r24, 0xFF	; 255
  da:	91 05       	cpc	r25, r1
  dc:	61 f0       	breq	.+24     	; 0xf6 <I2C_SetBusSpeed+0x50>
  de:	58 f0       	brcs	.+22     	; 0xf6 <I2C_SetBusSpeed+0x50>
  e0:	20 e0       	ldi	r18, 0x00	; 0
	{
		
		prescaler++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
		speed = speed / 4;
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
	uint8_t prescaler = 0;
	while(speed > 255)
  ec:	8f 3f       	cpi	r24, 0xFF	; 255
  ee:	91 05       	cpc	r25, r1
  f0:	09 f0       	breq	.+2      	; 0xf4 <I2C_SetBusSpeed+0x4e>
  f2:	b8 f7       	brcc	.-18     	; 0xe2 <I2C_SetBusSpeed+0x3c>
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <I2C_SetBusSpeed+0x52>

// Function that sets I2C bus speed in uC.
void I2C_SetBusSpeed(uint16_t speed)
{
	speed = (F_CPU / speed / 100 - 16) / 2;
	uint8_t prescaler = 0;
  f6:	20 e0       	ldi	r18, 0x00	; 0
	{
		
		prescaler++;
		speed = speed / 4;
	}
	TWSR = (TWSR & (_BV(TWPS1) | _BV(TWPS0))) | prescaler;
  f8:	e9 eb       	ldi	r30, 0xB9	; 185
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	93 70       	andi	r25, 0x03	; 3
 100:	29 2b       	or	r18, r25
 102:	20 83       	st	Z, r18
	TWBR = speed;
 104:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 108:	08 95       	ret

0000010a <I2C_Init>:
********************************************************************************/

// Function that initialize I2C communication in uC.
void I2C_Init(void)
{
	TWCR = _BV(TWEA) | _BV(TWEN);
 10a:	84 e4       	ldi	r24, 0x44	; 68
 10c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	I2C_SetBusSpeed(I2CBUSCLOCK / 100);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_SetBusSpeed>
 118:	08 95       	ret

0000011a <I2C_Start>:
}

// Function that generate START signal on I2C bus.
void I2C_Start(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 11a:	84 ea       	ldi	r24, 0xA4	; 164
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
int8_t I2C_ReceiveDataBytes_ACK(void);


static inline void I2C_WaitForComplete(void)
{
	while(!(TWCR & _BV(TWINT)))
 120:	ec eb       	ldi	r30, 0xBC	; 188
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	ec f7       	brge	.-6      	; 0x124 <I2C_Start+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_START) I2C_SetError(I2C_STARTError);
 12a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 12e:	08 95       	ret

00000130 <I2C_Stop>:
}

//Function that generate STOP signal on I2C bus.
void I2C_Stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 130:	84 e9       	ldi	r24, 0x94	; 148
 132:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 136:	08 95       	ret

00000138 <I2C_SendDevAddr>:
	}
	else
	{
		status = TW_MR_SLA_ACK;
	}
	TWDR = address;
 138:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
 13c:	84 e8       	ldi	r24, 0x84	; 132
 13e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 142:	ec eb       	ldi	r30, 0xBC	; 188
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <I2C_SendDevAddr+0xe>
	I2C_WaitForComplete();
	if(TW_STATUS != status)
 14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 150:	08 95       	ret

00000152 <I2C_SendStartAndSelect>:
	}
}

// Function that send start signal and device address that we want to communicate on I2C bus.
void I2C_SendStartAndSelect(uint8_t addr)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	I2C_Start();
 156:	0e 94 8d 00 	call	0x11a	; 0x11a <I2C_Start>
	I2C_SendDevAddr(addr);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 9c 00 	call	0x138	; 0x138 <I2C_SendDevAddr>
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <I2C_SendByte>:

// Function that send data to device through I2C bus.
void I2C_SendByte(uint8_t byte)
{
	TWDR = byte;
 164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = _BV(TWINT) | _BV(TWEN);
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 16e:	ec eb       	ldi	r30, 0xBC	; 188
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <I2C_SendByte+0xe>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MT_DATA_ACK)
 178:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 17c:	08 95       	ret

0000017e <I2C_ReceiveDataByte_NACK>:
}

// Function that receive data byte from device through I2C bus.
int8_t I2C_ReceiveDataByte_NACK(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	ec f7       	brge	.-6      	; 0x188 <I2C_ReceiveDataByte_NACK+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MR_DATA_NACK)
 18e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		I2C_SetError(I2C_NoNACK);
	}
	return TWDR;
 192:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 196:	08 95       	ret

00000198 <I2C_ReceiveDataBytes_ACK>:

// Function that receive data bytes(more then one byte) from device through I2C bus.
int8_t I2C_ReceiveDataBytes_ACK(void)
{
	TWCR = _BV(TWEA) | _BV(TWINT) | _BV(TWEN);
 198:	84 ec       	ldi	r24, 0xC4	; 196
 19a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 19e:	ec eb       	ldi	r30, 0xBC	; 188
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	ec f7       	brge	.-6      	; 0x1a2 <I2C_ReceiveDataBytes_ACK+0xa>
	I2C_WaitForComplete();
	if(TW_STATUS != TW_MR_DATA_ACK)
 1a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		I2C_SetError(I2C_NoACK);
	}
	return TWDR;
 1ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 1b0:	08 95       	ret

000001b2 <main>:
static uint8_t buffer;


int main(void)
{
	state = ACCEL_INIT_STATE;
 1b2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
			I2C_SendStartAndSelect(LIS3DH_W);
			I2C_SendByte(CTRL_REG1);
			I2C_SendByte(buffer);
			I2C_Stop();
			
			state = ACCEL_RUN_STATE;
 1b6:	68 94       	set
 1b8:	ff 24       	eor	r15, r15
 1ba:	f1 f8       	bld	r15, 1
    {
		switch(state)
		{
		case ACCEL_INIT_STATE:
			I2C_Init();
			state = ACCEL_CONFIG_STATE;
 1bc:	dd 24       	eor	r13, r13
 1be:	d3 94       	inc	r13
			
		case ACCEL_RUN_STATE:
			I2C_SendStartAndSelect(LIS3DH_W);
			I2C_SendByte(OUT_X_L | 0x80);
			I2C_SendStartAndSelect(LIS3DH_R);
			accelsTemp.x = I2C_ReceiveDataBytes_ACK();
 1c0:	c2 e0       	ldi	r28, 0x02	; 2
 1c2:	d1 e0       	ldi	r29, 0x01	; 1
			accelsTemp.y = I2C_ReceiveDataBytes_ACK();
			accelsTemp.z = I2C_ReceiveDataByte_NACK();
			I2C_Stop();
			
			state = ACCEL_WORKING_STATE;
 1c4:	68 94       	set
 1c6:	ee 24       	eor	r14, r14
 1c8:	e2 f8       	bld	r14, 2
		break;
			
		case ACCEL_WORKING_STATE:
			if((accelsTemp.x - accels.x) > 32)
 1ca:	05 e0       	ldi	r16, 0x05	; 5
 1cc:	11 e0       	ldi	r17, 0x01	; 1
{
	state = ACCEL_INIT_STATE;
	
    while (1) 
    {
		switch(state)
 1ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	69 f0       	breq	.+26     	; 0x1f0 <main+0x3e>
 1d6:	38 f0       	brcs	.+14     	; 0x1e6 <main+0x34>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	09 f4       	brne	.+2      	; 0x1de <main+0x2c>
 1dc:	4c c0       	rjmp	.+152    	; 0x276 <main+0xc4>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0x32>
 1e2:	60 c0       	rjmp	.+192    	; 0x2a4 <main+0xf2>
 1e4:	f6 cf       	rjmp	.-20     	; 0x1d2 <main+0x20>
		{
		case ACCEL_INIT_STATE:
			I2C_Init();
 1e6:	0e 94 85 00 	call	0x10a	; 0x10a <I2C_Init>
			state = ACCEL_CONFIG_STATE;
 1ea:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <state>
		break;
 1ee:	ef cf       	rjmp	.-34     	; 0x1ce <main+0x1c>
			
		case ACCEL_CONFIG_STATE:			
			I2C_SendStartAndSelect(LIS3DH_W);
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 1f6:	80 e2       	ldi	r24, 0x20	; 32
 1f8:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 1fc:	81 e3       	ldi	r24, 0x31	; 49
 1fe:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			buffer = I2C_ReceiveDataByte_NACK();
 202:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_ReceiveDataByte_NACK>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			I2C_Stop();
 20a:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
	
			buffer |= _BV(LPen) | _BV(ODR2) | _BV(ODR0);
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 212:	88 65       	ori	r24, 0x58	; 88
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_SendByte(buffer);
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 228:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_Stop();
 22c:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG4);
 236:	83 e2       	ldi	r24, 0x23	; 35
 238:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 23c:	81 e3       	ldi	r24, 0x31	; 49
 23e:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			buffer = I2C_ReceiveDataByte_NACK();
 242:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_ReceiveDataByte_NACK>
 246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			I2C_Stop();
 24a:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
			
			buffer |= _BV(BDU) | _BV(FS1);
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 252:	80 6a       	ori	r24, 0xA0	; 160
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
			
			I2C_SendStartAndSelect(LIS3DH_W);
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			I2C_SendByte(CTRL_REG1);
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_SendByte(buffer);
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 268:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_Stop();
 26c:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
			
			state = ACCEL_RUN_STATE;
 270:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <state>
		break;
 274:	ac cf       	rjmp	.-168    	; 0x1ce <main+0x1c>
			
		case ACCEL_RUN_STATE:
			I2C_SendStartAndSelect(LIS3DH_W);
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			I2C_SendByte(OUT_X_L | 0x80);
 27c:	88 ea       	ldi	r24, 0xA8	; 168
 27e:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_SendByte>
			I2C_SendStartAndSelect(LIS3DH_R);
 282:	81 e3       	ldi	r24, 0x31	; 49
 284:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_SendStartAndSelect>
			accelsTemp.x = I2C_ReceiveDataBytes_ACK();
 288:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_ReceiveDataBytes_ACK>
 28c:	88 83       	st	Y, r24
			accelsTemp.y = I2C_ReceiveDataBytes_ACK();
 28e:	0e 94 cc 00 	call	0x198	; 0x198 <I2C_ReceiveDataBytes_ACK>
 292:	89 83       	std	Y+1, r24	; 0x01
			accelsTemp.z = I2C_ReceiveDataByte_NACK();
 294:	0e 94 bf 00 	call	0x17e	; 0x17e <I2C_ReceiveDataByte_NACK>
 298:	8a 83       	std	Y+2, r24	; 0x02
			I2C_Stop();
 29a:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Stop>
			
			state = ACCEL_WORKING_STATE;
 29e:	e0 92 01 01 	sts	0x0101, r14	; 0x800101 <state>
		break;
 2a2:	95 cf       	rjmp	.-214    	; 0x1ce <main+0x1c>
			
		case ACCEL_WORKING_STATE:
			if((accelsTemp.x - accels.x) > 32)
 2a4:	28 81       	ld	r18, Y
 2a6:	82 2f       	mov	r24, r18
 2a8:	02 2e       	mov	r0, r18
 2aa:	00 0c       	add	r0, r0
 2ac:	99 0b       	sbc	r25, r25
 2ae:	f8 01       	movw	r30, r16
 2b0:	30 81       	ld	r19, Z
 2b2:	83 1b       	sub	r24, r19
 2b4:	91 09       	sbc	r25, r1
 2b6:	37 fd       	sbrc	r19, 7
 2b8:	93 95       	inc	r25
 2ba:	81 97       	sbiw	r24, 0x21	; 33
 2bc:	14 f0       	brlt	.+4      	; 0x2c2 <main+0x110>
			{
				PORTB |= _BV(5);
 2be:	2d 9a       	sbi	0x05, 5	; 5
 2c0:	23 c0       	rjmp	.+70     	; 0x308 <main+0x156>
			}
			else if((accelsTemp.y - accels.y) > 32)
 2c2:	39 81       	ldd	r19, Y+1	; 0x01
 2c4:	83 2f       	mov	r24, r19
 2c6:	03 2e       	mov	r0, r19
 2c8:	00 0c       	add	r0, r0
 2ca:	99 0b       	sbc	r25, r25
 2cc:	f8 01       	movw	r30, r16
 2ce:	41 81       	ldd	r20, Z+1	; 0x01
 2d0:	84 1b       	sub	r24, r20
 2d2:	91 09       	sbc	r25, r1
 2d4:	47 fd       	sbrc	r20, 7
 2d6:	93 95       	inc	r25
 2d8:	81 97       	sbiw	r24, 0x21	; 33
 2da:	14 f0       	brlt	.+4      	; 0x2e0 <main+0x12e>
			{
				PORTB |= _BV(5);
 2dc:	2d 9a       	sbi	0x05, 5	; 5
 2de:	14 c0       	rjmp	.+40     	; 0x308 <main+0x156>
			}
			else if((accelsTemp.z - accels.z) > 32)
 2e0:	4a 81       	ldd	r20, Y+2	; 0x02
 2e2:	84 2f       	mov	r24, r20
 2e4:	04 2e       	mov	r0, r20
 2e6:	00 0c       	add	r0, r0
 2e8:	99 0b       	sbc	r25, r25
 2ea:	f8 01       	movw	r30, r16
 2ec:	52 81       	ldd	r21, Z+2	; 0x02
 2ee:	85 1b       	sub	r24, r21
 2f0:	91 09       	sbc	r25, r1
 2f2:	57 fd       	sbrc	r21, 7
 2f4:	93 95       	inc	r25
 2f6:	81 97       	sbiw	r24, 0x21	; 33
 2f8:	14 f0       	brlt	.+4      	; 0x2fe <main+0x14c>
			{
				PORTB |= _BV(5);
 2fa:	2d 9a       	sbi	0x05, 5	; 5
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <main+0x156>
			}
			else
			{
				accels.x = accelsTemp.x;
 2fe:	f8 01       	movw	r30, r16
 300:	20 83       	st	Z, r18
				accels.y = accelsTemp.y;
 302:	31 83       	std	Z+1, r19	; 0x01
				accels.z = accelsTemp.z;
 304:	42 83       	std	Z+2, r20	; 0x02
				
				PORTB &= ~_BV(5);
 306:	2d 98       	cbi	0x05, 5	; 5
			}
			
			state = ACCEL_RUN_STATE;
 308:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <state>
		break;
 30c:	60 cf       	rjmp	.-320    	; 0x1ce <main+0x1c>

0000030e <__divmodsi4>:
 30e:	05 2e       	mov	r0, r21
 310:	97 fb       	bst	r25, 7
 312:	1e f4       	brtc	.+6      	; 0x31a <__divmodsi4+0xc>
 314:	00 94       	com	r0
 316:	0e 94 9e 01 	call	0x33c	; 0x33c <__negsi2>
 31a:	57 fd       	sbrc	r21, 7
 31c:	07 d0       	rcall	.+14     	; 0x32c <__divmodsi4_neg2>
 31e:	0e 94 a6 01 	call	0x34c	; 0x34c <__udivmodsi4>
 322:	07 fc       	sbrc	r0, 7
 324:	03 d0       	rcall	.+6      	; 0x32c <__divmodsi4_neg2>
 326:	4e f4       	brtc	.+18     	; 0x33a <__divmodsi4_exit>
 328:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__negsi2>

0000032c <__divmodsi4_neg2>:
 32c:	50 95       	com	r21
 32e:	40 95       	com	r20
 330:	30 95       	com	r19
 332:	21 95       	neg	r18
 334:	3f 4f       	sbci	r19, 0xFF	; 255
 336:	4f 4f       	sbci	r20, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255

0000033a <__divmodsi4_exit>:
 33a:	08 95       	ret

0000033c <__negsi2>:
 33c:	90 95       	com	r25
 33e:	80 95       	com	r24
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	8f 4f       	sbci	r24, 0xFF	; 255
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__udivmodsi4>:
 34c:	a1 e2       	ldi	r26, 0x21	; 33
 34e:	1a 2e       	mov	r1, r26
 350:	aa 1b       	sub	r26, r26
 352:	bb 1b       	sub	r27, r27
 354:	fd 01       	movw	r30, r26
 356:	0d c0       	rjmp	.+26     	; 0x372 <__udivmodsi4_ep>

00000358 <__udivmodsi4_loop>:
 358:	aa 1f       	adc	r26, r26
 35a:	bb 1f       	adc	r27, r27
 35c:	ee 1f       	adc	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	a2 17       	cp	r26, r18
 362:	b3 07       	cpc	r27, r19
 364:	e4 07       	cpc	r30, r20
 366:	f5 07       	cpc	r31, r21
 368:	20 f0       	brcs	.+8      	; 0x372 <__udivmodsi4_ep>
 36a:	a2 1b       	sub	r26, r18
 36c:	b3 0b       	sbc	r27, r19
 36e:	e4 0b       	sbc	r30, r20
 370:	f5 0b       	sbc	r31, r21

00000372 <__udivmodsi4_ep>:
 372:	66 1f       	adc	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	88 1f       	adc	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	1a 94       	dec	r1
 37c:	69 f7       	brne	.-38     	; 0x358 <__udivmodsi4_loop>
 37e:	60 95       	com	r22
 380:	70 95       	com	r23
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	9b 01       	movw	r18, r22
 388:	ac 01       	movw	r20, r24
 38a:	bd 01       	movw	r22, r26
 38c:	cf 01       	movw	r24, r30
 38e:	08 95       	ret

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
